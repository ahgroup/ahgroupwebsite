<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
  <head>
    <title>Active learning of infectious disease epidemiology</title>
    <meta charset="utf-8" />
    <meta name="author" content="Andreas Handel" />
    <meta name="date" content="2019-07-04" />
    <link href="libs/remark-css-0.0.1/default.css" rel="stylesheet" />
    <link href="libs/remark-css-0.0.1/default-fonts.css" rel="stylesheet" />
    <link rel="stylesheet" href="media\handelslides.css" type="text/css" />
  </head>
  <body>
    <textarea id="source">
class: center, middle, title-slide, title-slide

# Active learning of infectious disease epidemiology
### Andreas Handel
### University of Georgia
### 2019-07-04

---



# The challenge

.pull-left[
* Modern infectious disease epidemiology is fairly mathematical/computational.
* Models are generally implemented and analyzed on a computer.
* This requires students to use/write computer code.
* Many students have limited coding skills.
* The lack of coding skills can limit the use of models.
]

.pull-right[
&lt;div class="figure" style="text-align: center"&gt;
&lt;img src="./media/cant-you-do-anything-right.gif" alt="www.glasbergen.com" width="100%" /&gt;
&lt;p class="caption"&gt;www.glasbergen.com&lt;/p&gt;
&lt;/div&gt;
]

---
# The goals
.pull-left[
* Help students learn modern, model-based, approaches to infectious disease epidemiology without having to write code.
* Allow for __active, hands-on learning.__
* Provide an (optional) way to easily progress toward increased coding.
]

.pull-right[
&lt;div class="figure" style="text-align: center"&gt;
&lt;img src="./media/lecturing.jpg" alt="tomfishburne.com" width="100%" /&gt;
&lt;p class="caption"&gt;tomfishburne.com&lt;/p&gt;
&lt;/div&gt;
]

---
# A solution
* Write software that allows students to use models without having to write code.
  * DSAIDE - Dynamical Systems Approach to Infectious Disease Epidemiology: https://ahgroup.github.io/DSAIDE/
  * DSAIRM - Dynamical Systems Approach to Immune Response Modeling: https://ahgroup.github.io/DSAIRM/
  * See also: Handel 2017 PLoS Computational Biology _“Learning infectious disease epidemiology in a modern framework”_


---
# DSAIDE overview
* Easy install like any other R package.
* Single command after package is installed and loaded to get to main menu.

&lt;img src="./media/mainmenu.png" width="60%" style="display: block; margin: auto;" /&gt;


---
# DSAIDE interface

&lt;img src="./media/appexample.png" width="100%" style="display: block; margin: auto;" /&gt;

---
# DSAIDE documentation

&lt;img src="./media/modelexample.png" width="100%" style="display: block; margin: auto;" /&gt;

---
# DSAIDE tasks

&lt;img src="./media/whattodoexample.png" width="100%" style="display: block; margin: auto;" /&gt;


---
# Easy advancement
* Students can advance from the graphical exploration of the models (Level 1) to adding a bit of their own code and make the models do more (L2) all the way to using the model code and modifying it to fit their needs (L3).

&lt;img src="./media/dsaidelevels.png" width="100%" style="display: block; margin: auto;" /&gt;


---
# Other considerations
* The software is written as R package. R is a powerful and FREE, widely used statistical and programming language. 
* The packages are open source and publicly developed on Github and CRAN.
* The packages are developed such that students can seamlessly move from graphical interaction (exploring models) to doing their own coding (becoming modelers).


---
# More tools
* DSAIDE/DSAIRM work well for exploring models that I pre-wrote.
* DSAIDE/DSAIRM are written such that users can go beyond the graphical interface and gain flexibility without too much additional coding.  
* __However__, if a user wants to build/explore new models, they usually have to take the (pre-written) models and alter them. Better than starting from scratch, but still requires coding.
* A new R package, called _modelbuilder_ allows individuals to graphically build and analyze custom compartmental (ODE/stochastic/discrete-time) without the need to write code.
* Package is in development, current version available at: https://ahgroup.github.io/modelbuilder/
  
  
---
# DSAIDE in action
* If you haven't done yet, follow the brief installation instructions here: https://ahgroup.github.io/DSAIDE/
* Start with the _Basic SIR Model_ app.
* Continue with the _ID control for multiple outbreaks_ app.
* Continue to explore any app you are interested in. For advanced users, you can download the simulation functions for all apps and try the L2 and L3 approach. See the "Get Started" tutorial on the package website for examples.
    </textarea>
<style data-target="print-only">@media screen {.remark-slide-container{display:block;}.remark-slide-scaler{box-shadow:none;}}</style>
<script src="https://remarkjs.com/downloads/remark-latest.min.js"></script>
<script>var slideshow = remark.create({
"highlightStyle": "github",
"highlightLines": true,
"countIncrementalSlides": false
});
if (window.HTMLWidgets) slideshow.on('afterShowSlide', function (slide) {
  window.dispatchEvent(new Event('resize'));
});
(function(d) {
  var s = d.createElement("style"), r = d.querySelector(".remark-slide-scaler");
  if (!r) return;
  s.type = "text/css"; s.innerHTML = "@page {size: " + r.style.width + " " + r.style.height +"; }";
  d.head.appendChild(s);
})(document);

(function(d) {
  var el = d.getElementsByClassName("remark-slides-area");
  if (!el) return;
  var slide, slides = slideshow.getSlides(), els = el[0].children;
  for (var i = 1; i < slides.length; i++) {
    slide = slides[i];
    if (slide.properties.continued === "true" || slide.properties.count === "false") {
      els[i - 1].className += ' has-continuation';
    }
  }
  var s = d.createElement("style");
  s.type = "text/css"; s.innerHTML = "@media print { .has-continuation { display: none; } }";
  d.head.appendChild(s);
})(document);
// delete the temporary CSS (for displaying all slides initially) when the user
// starts to view slides
(function() {
  var deleted = false;
  slideshow.on('beforeShowSlide', function(slide) {
    if (deleted) return;
    var sheets = document.styleSheets, node;
    for (var i = 0; i < sheets.length; i++) {
      node = sheets[i].ownerNode;
      if (node.dataset["target"] !== "print-only") continue;
      node.parentNode.removeChild(node);
    }
    deleted = true;
  });
})();</script>

<script>
(function() {
  var links = document.getElementsByTagName('a');
  for (var i = 0; i < links.length; i++) {
    if (/^(https?:)?\/\//.test(links[i].getAttribute('href'))) {
      links[i].target = '_blank';
    }
  }
})();
</script>

<script>
slideshow._releaseMath = function(el) {
  var i, text, code, codes = el.getElementsByTagName('code');
  for (i = 0; i < codes.length;) {
    code = codes[i];
    if (code.parentNode.tagName !== 'PRE' && code.childElementCount === 0) {
      text = code.textContent;
      if (/^\\\((.|\s)+\\\)$/.test(text) || /^\\\[(.|\s)+\\\]$/.test(text) ||
          /^\$\$(.|\s)+\$\$$/.test(text) ||
          /^\\begin\{([^}]+)\}(.|\s)+\\end\{[^}]+\}$/.test(text)) {
        code.outerHTML = code.innerHTML;  // remove <code></code>
        continue;
      }
    }
    i++;
  }
};
slideshow._releaseMath(document);
</script>
<!-- dynamically load mathjax for compatibility with self-contained -->
<script>
(function () {
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.src  = 'https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-MML-AM_CHTML';
  if (location.protocol !== 'file:' && /^https?:/.test(script.src))
    script.src  = script.src.replace(/^https?:/, '');
  document.getElementsByTagName('head')[0].appendChild(script);
})();
</script>
  </body>
</html>
